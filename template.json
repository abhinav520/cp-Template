{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"abhinav520_snippet": {
		"prefix": "fj",
		"body": [
			"//Abhinav Singh",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"\n//---------------------------------------------------------------------//",
			"bool debug;",
			"template <typename T, typename U> istream& operator>>(istream &is, pair<T, U> &p) { return is >> p.first >> p.second; }",
			"template <typename T, typename U> ostream& operator<<(ostream &os, const pair<T, U> &p) { return debug ? os << \"(\" << p.first << \", \" << p.second << \")\" : os << p.first << \" \" << p.second; }",
			"template <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> istream &operator>>(istream &is, T_container &v) { for (T &x : v) is >> x; return is; }",
			"template <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream &operator<<(ostream &os, const T_container &v) { bool f = false; if(debug) { os << \"[\"; for (const T &x : v) { if (f) os << \", \"; os << x; f = true; } os << \"]\"; } else { for (const T &x : v) { if (f) os << \" \"; os << x; f = true; } } return os; }",
			"void scan() {} template <typename Head, typename ...Tail> void scan(Head &H, Tail &...T) { cin >> H; scan(T...); }",
			"void print() { cout << \"\\n\"; } template <typename Head> void print(const Head &H) { cout << H << \"\\n\"; } template <typename Head, typename ...Tail> void print(const Head &H, const Tail &...T) { cout << H << \" \"; print(T...); }",
			"template <typename Head> void dbg_out(string var, const Head &H) { cerr << var << \" = \" << H << endl; }",
			"template <typename Head, typename ...Tail> void dbg_out(string var, const Head &H, const Tail &...T) { for (int i = 0, b = 0; i < int(var.size()); i++) { if (var[i] == '(' || var[i] == '{') { b++; } else if (var[i] == ')' || var[i] == '}') { b--; } else if (var[i] == ',' && b == 0) { cerr << var.substr(0, i) << \" = \" << H << \" | \"; dbg_out(var.substr(var.find_first_not_of(' ', i + 1)), T...); break; } } }",
			"#ifndef ONLINE_JUDGE",
			"#define dbg(...) debug = true, dbg_out(#__VA_ARGS__, __VA_ARGS__), debug = false",
			"#else",
			"#define dbg(...)",
			"#endif",
			"//---------------------------------------------------------------------//\n",
			"#define int int64_t",
			"#define fastio  ios_base::sync_with_stdio(0), cin.tie(0)",
			"#define ini(_n)  int _n;cin>>_n;",
			"#define sni(_s)  string _s;cin>>_s;",
			"#define input(vec,s,n) vector<int> vec(s+n);for(int i=s;i<s+n;i++){cin>>vec[i];}",
			"template <typename T> using vv = vector<vector<T>>;",
			"template <typename T> using mxpq = priority_queue<T>;",
			"template <typename T> using mnpq = priority_queue<T, vector<T>, greater<T>>;",
			"typedef pair<int,int> pi;",
			"typedef vector<int> vi;",
			"#define seal(n,m) (((n)%(m)!=0)?((n)/(m)+1):((n)/(m)))",
			"#define all(v) v.begin(), v.end()",
			"#define sz(x) ((int)(x).size())",
			"#define mem(v,p) memset(v,sizeof(v),p)",
			"#define endl '\\n'",
			"#define yes cout<<\"YES\"<<endl",
			"#define no cout<<\"NO\"<<endl",
			"//const int mod= 998244353;",
			"const int mod= 1000000007;",
			"const int N=2e5+10, inf=1e18+10;\n\n",
			"void solve(){",
			// "\tint n=0,i=0,j=0;",
			"\t$0",
			"}",
			"\n",
			"signed main()",
			"{",
			"\tfastio;",
			"\tint tc=1;",
			"\tcin>>tc;",
			"\tfor(int testcase=1;testcase<=tc;testcase++){",
			"\t\t//dbg(testcase);",
			"\t\tsolve();",
			"\t}\n",
			"\treturn 0;",
			"}"
		],
		"description": "CP snippet for C++ program"
	},
	"for loop" : {
		"prefix": "fo",
		"body": [
			"for(int ${1:i}=${2:0};${1:i}<${3:n};${1:i}++){",
			"\t$0",
			"}"
		],
		"description": "For loop"
	},
	"bits function": {
		"prefix": "bits",
		"body": [
			"#define setbits(x)  __builtin_popcountll(x) // returns number of 1-bits of x",
			"#define trailing0(x) __builtin_ctzll(x) //returns num of trailing 0-bits of x",
			"#define leading0(x) __builtin_clzll(x) //returns num of leading 0-bits of x",
			"#define firstbitpos(x) __builtin_ffsll(x) //returns 1 + indexOf(least significant 1-bit)",
			"#define binary(n) bitset<32>(n)",
			"bool getbit(int val, int pos){",
			"    return ((val & (1<<pos))!=0);",
			"}",
			"int setbit(int val, int pos){",
			"    return (val|(1<<pos));",
			"}",
			"int unique(int *arr,int n){",
			"    int result=0;",
			"    for(int i=0;i<64;i++){",
			"        int sum=0;",
			"        for(int j=0;j<n;j++){",
			"            if(getbit(arr[j],i)){",
			"                sum++;",
			"            }",
			"        }",
			"        if((sum%3)!=0){",
			"            result=setbit(result,i);",
			"        }",
			"    }",
			"    return result;",
			"}",
			"// Gray code is a binary numeral system where two successive values differ in only one bit.",
			"// eg  000, 001, 011, 010, 110, 111, 101, 100,... [G(4)=6]",
			"int grey_code (int n) {",
			"    return n ^ (n >> 1);",
			"}",
			"//inverse rev_G(6)=4",
			"int rev_grey_code (int g) {",
			"  int n = 0;",
			"  for (; g; g >>= 1)",
			"    n ^= g;",
			"  return n;",
			"}",
		],
		"description": "inbuilt Bits function"
	},
	"generate subsets": {
		"prefix": ["subsets","generateSubsets"],
		"body": [
			"void subset(int* arr,int n){",
			"\tfor(int i=0;i<(1<<n);i++){",
			"\t\tfor(int j=0;j<n;j++){",
			"\t\t\tif(i & (1<<j)){",
			"\t\t\t\tcout<<arr[j]<<\" \";",
			"\t\t\t}",
			"\t\t}",
			"\t\tcout<<endl;",
			"\t}",
			"}",
		],
		"description": "func to generate subsets"
	},
	"extended gcd and functions":{
		"prefix": ["xgcd","mminv"],
		"body": [
			"//extendedgcd gives solution of ax+by=c and to have solution c%gcd(a,b) should be 0. Its genereal sol is [x+(k*a)/gcd,y-(k*b)/gcd] where k is Integer",
			"void extendgcd(int a, int b, int *v)",
			"{",
			"  if (b == 0)",
			"  {",
			"    v[0] = 1;",
			"    v[1] = 0;",
			"    v[2] = a;",
			"    return;",
			"  }",
			"  extendgcd(b, a % b, v);",
			"  int x = v[1];",
			"  v[1] = v[0] - v[1] * (a / b);",
			"  v[0] = x;",
			"  return;",
			"}",
			"int mminv(int a, int b)",
			"{",
			"  int arr[3];",
			"  extendgcd(a, b, arr);",
			"  return (arr[0] % b + b) % b;",
			"} \n",
			"// if b is prime just do mpow(a,b-2,b)",
			"int mpow(int base, int exp, int mod = 1000000007)",
			"{",
			"  int ans = 1;",
			"  while (exp)",
			"  {",
			"    if (exp & 1)",
			"      ans = (ans * 1LL * base) % mod;",
			"    base = (base * base) % mod;",
			"    exp >>= 1;",
			"  }",
			"  return ans;",
			"}\n",
			"$0",
		],
		"description": "Extended GCD and functions"
	},
	"power" : {
		"prefix": ["mpow","pow"],
		"body": [
			"\n//power function",
			"int mpow(int base, int exp, int mod = 1000000007)",
			"{",
			"  int ans = 1;",
			"  while (exp)",
			"  {",
			"    if (exp & 1)",
			"      ans = (ans * 1LL * base) % mod;",
			"    base = (base * base) % mod;",
			"    exp >>= 1;",
			"  }",
			"  return ans;",
			"}\n",
		],
		"description": "Power function",
	},
	"factor": {
		"prefix": "factor",
		"body": [
			"\n//factor function",
			"vector<int> factor(int n)",
			"{",
			"  vector<int> ans;",
			"  for (int i = 2; i * i <= n; i++)",
			"  {",
			"    if (n % i == 0)",
			"    {",
			"      ans.push_back(i);",
			"      while (n % i == 0)",
			"        n /= i;",
			"    }",
			"  }",
			"  if (n > 1)",
			"    ans.push_back(n);",
			"  return ans;",
			"}\n",
		],
		"description": "Factor function",
	},
	"factor with frequency": {
		"prefix": "ffactor",
		"body": [
			"vector<pair<int,int>> factor(int x)",
			"{",
			"  vector<pair<int,int>> ans;",
			"  for (int i = 2; i * i <= x; i++)",
			"    if (x % i == 0)",
			"    {",
			"      ans.push_back({i, 1});",
			"      while ((x /= i) % i == 0)",
			"        ans.back().second++;",
			"    }",
			"  if (x != 1)",
			"    ans.push_back({x, 1});",
			"  return ans;",
			"}",
		],
		"description": "Factor function with frequency",
	},
	"divisor": {
		"prefix": "divisor",
		"body": [
			"template <class T>",
			"vector<T> divisor(T x)",
			"{",
			"  vector<T> ans;",
			"  for (T i = 1; i * i <= x; i++)",
			"    if (x % i == 0)",
			"    {",
			"      ans.push_back(i);",
			"      if (i * i != x)",
			"        ans.push_back(x / i);",
			"    }",
			"  return ans;",
			"}",
		],
		"description": "Divisor function",
	},
	"seive function": {
		"prefix": ["sieve","seive"],
		"body": [
			"vector<int> sieve(int n)",
			"{",
			"  int *arr = new int[n + 1]();",
			"  vector<int> vect;",
			"  for (int i = 2; i <= n; i++)",
			"    if (arr[i] == 0)",
			"    {",
			"      vect.push_back(i);",
			"      for (int j = 2 * i; j <= n; j += i)",
			"        arr[j] = 1;",
			"    }",
			"  return vect;",
			"}",
		],
		"description": "Sieve function",
	},
	"random" : {
		"prefix": "random",
		"body": [
			"mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());",
			"int rand(int a, int b) { return uniform_int_distribution<int>(a, b)(rng); }",
			"template <class t> void random_shuffle(vector<t> &a) { for(int i=0;i<size(a);i++) swap(a[i], a[rand(0, i + 1)]); }\n",
			"$0",
		],
		"description": "give random number b/w a and b"
	},
	"policy based data structure": {
		"prefix": "pbds",
		"body": [
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#include <ext/pb_ds/tree_policy.hpp>",
			"using namespace __gnu_pbds;",
			"typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;",
			"//Note: less<int> is bool cmp, use greater<int> for descending order, less_equal<int> for multiset",
			"//eg: ",
			"//pbds A;  //declaration",
			"//A.find_by_order(k);  //gives iterator to the kth smallest element (k starts from 0) in log(n)",
			"//A.order_of_key(val); //return number of integer strictly less than val in the set  (in log(n))\n",
		],
		"description": "policy based data structure similar to set but with extra functionality"
	},
	"Debugger for c++": {
		"prefix": "dbg",
		"body": [
			"template <typename A, typename B>ostream &operator<<(ostream &os, const pair<A, B> &p){return os << '(' << p.first << \", \" << p.second << ')';}",
			"template <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type>ostream &operator<<(ostream &os, const T_container &v){    os << '{';string sep;for (const T &x : v)os << sep << x, sep = \", \";return os << '}';}",
			"",
			"void dbg_out() { cerr << endl; }",
			"template <typename Head, typename... Tail>",
			"void dbg_out(Head H, Tail... T){cerr << ' ' << H; dbg_out(T...);}",
			"",
			"#ifndef ONLINE_JUDGE",
			"#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)",
			"#else",
			"#define dbg(...)",
			"#endif",
			""
		],
		"description": "Debugger for c++"
	},
	"dfs": {
		"prefix": "dfs",
		"body": [
			"void dfs(vector<vector<int>> &g, vector<int> &vis, int vertex){",
			"\t//Take action on vertex after entering the vertex",
			"",
			"\t// if(vis[vertex]) return;",
			"\tvis[vertex]=true;",
			"",
			"\tfor(int child: g[vertex]){",
			"\t\t//Take action on child before entering the child node",
			"\t\tif(vis[child]) continue;",
			"\t\t//cout<<vertex<<\" \"<<child<<endl;",
			"\t\tdfs(g, vis, child);",
			"\t\t//Take action on child after entering the child node",
			"\t}",
			"",
			"\t//Take action on vertex before leaving the vertex",
			"\t",
			"}",
		],
		"description": "dfs template"
	},
	"bfs": {
		"prefix": "bfs",
		"body": [
			"void bfs(vector<vector<int>> &g, vector<int> &lvl, vector<int> &vis, int start){",
			"// vector<int> parent;// pass it from function",
			"\tqueue<int>q;",
			"\tq.push(start);",
			"\tvis[start]=0;",
			"\tlvl[start]=0;",
			"\t// parent[start]=-1;",
			"\twhile(!q.empty()){",
			"\t\tint v = q.front();",
			"\t\tq.pop();",
			"\t\tfor (int u : g[v]){",
			"\t\t\tif (vis[u]) continue;",
			"\t\t\tvis[u] = true;",
			"\t\t\tq.push(u);",
			"\t\t\tlvl[u] = lvl[v] + 1;",
			"\t\t\t// parent[u] = v;",
			"\t\t}",
			"\t}",
			"}",
		],
		"description": "bfs template"
	},
	"Disjoint set Union": {
		"prefix": "dsu",
		"body": [
			"int parent[N];",
			"int siz[N];",
			"// int rnk[N];",
			"",
			"void make_set(int v){",
			"\tparent[v]=v;",
			"\tsiz[v] = 1;  //when use siz",
			"\t// rnk[v]=0;",
			"}",
			"",
			"int find_set(int v){ //findParentroot",
			"\tif(v==parent[v]) return v;",
			"\treturn parent[v]=find_set(parent[v]);",
			"}",
			"",
			"void union_sets(int a, int b){",
			"\ta=find_set(a);",
			"\tb=find_set(b);",
			"\tif(a!=b){",
			"\t\tif(siz[a]<siz[b])",
			"\t\t// if(rnk[a]<rnk[b])",
			"\t\t\tswap(a,b);",
			"\t\tparent[b]=a;",
			"\t\tsiz[a] += siz[b]; //when use siz remove next lines",
			"\t\t// if(rnk[a]==rnk[b])",
			"\t\t// rnk[a]++;",
			"\t}",
			"}",
			"",
			"//first use this loop to make set",
			"//for(int i=1;i<=n;i++){",
			"//\tmake_set(i);",
			"//}",
			"",
		],
		"description": "dsu template"
	},
	"Long Multiplication": {
		"prefix": "lmul",
		"body": [
			" ",
			"/* large exponential if A , B and M(mod like 1e18+7) are in the range of 1e18 */",
			"int lMul(int a, int b, int M=1e18+7);",
			"// TC- (log(n))*(log(n))",
			"int largeExpo(int A, int B, int M=1e18+7){",
			"\tint ans=1;",
			"\twhile(B){",
			"\t\tif(B&1){",
			"\t\t\t// ans=(ans*1LL*A)%M          // results in overflow",
			"\t\t\tans=lMul(ans,A);",
			"\t\t}",
			"\t\tA=lMul(A,A);",
			"\t\tB>>=1;",
			"\t}",
			"\treturn ans;",
			"}",
			"int lMul(int a, int b, int M=1e18+7){",
			"\tint ans=0;",
			"\twhile(b){",
			"\t\tif(b&1){",
			"\t\t\tans= (ans+a)%M;",
			"\t\t}",
			"\t\ta = (a+a)%M;",
			"\t\tb>>=1;",
			"\t}",
			"\treturn ans;",
			"}",
			"// if b is large",
			"// a^b mod m = a^(b mod etf(m)) mod m\n",
		],
		"description": "large exponentiation used when exponent is large"
	},
	"GRID dfs": {
		"prefix": "grid_dfs",
		"body": [
			"vector<vector<bool>> vis(n, vector<bool>(m, false));",
			"auto possible = [&](int u, int v)",
			"{",
			"    return u >= 0 && u < n && v >= 0 && v < m && (g[u][v] == 1 && !vis[u][v]);",
			"};",
			"function<void(int, int)> grid_dfs = [&](int u, int v)",
			"{",
			"    vis[u][v] = true;",
			"    // static int dr[4] = {-1, 0, 1, 0};",
			"    // static int dc[4] = {0, -1, 0, 1};",
			"    static int dr[8] = {-1, -1, -1, 0, 0, 1, 1, 1};",
			"    static int dc[8] = {-1, 0, 1, -1, 1, -1, 0, 1};",
			"    for (int k = 0; k < 8; k++)",
			"    {",
			"        if (possible(u + dr[k], v + dc[k])){",
			"            grid_dfs(u + dr[k], v + dc[k]);",
			"        }",
			"    }",
			"};",
			"${1:grid_dfs($2,$3);}",
			"$0"
		],
		"description": "grid dfs"
	},
	"GRID bfs": {
		"prefix": "grid_bfs",
		"body": [
			"// static int dr[4] = {-1, 0, 1, 0};",
			"// static int dc[4] = {0, -1, 0, 1};",
			"static int dr[8] = {-1, -1, -1, 0, 0, 1, 1, 1};",
			"static int dc[8] = {-1, 0, 1, -1, 1, -1, 0, 1};",
			"",
			"auto e = [&] (int r, int c) {",
			"    return 0 <= r && r < n && 0 <= c && c < m;  ",
			"};",
			"auto grid_bfs = [&] (const vector<pair<int, int>> &source, vector<vector<int>> &d) {",
			"    d.assign(n, vector<int>(m, inf));",
			"    queue<pair<int, int>> q;",
			"    for (auto &p : source) {",
			"        int r = p.first;",
			"        int c = p.second;",
			"        q.emplace(r, c);",
			"        d[r][c] = 0;    ",
			"    }",
			"    while(!q.empty()) {",
			"        int r = q.front().first;",
			"        int c = q.front().second;",
			"        q.pop();   ",
			"        for(int dir = 0; dir < 8; dir++) {",
			"            int nr = r + dr[dir], nc = c  + dc[dir];",
			"            if(e(nr, nc) && d[r][c] + 1 < d[nr][nc]) {",
			"                q.emplace(nr, nc);",
			"                d[nr][nc] = d[r][c] + 1;",
			"            }",
			"        }    ",
			"    }",
			"};",
			"${1:vector<vector<int>> d;",
			"grid_bfs({{0, 0\\}\\}, d);}",
			"$0"
		],
		"description": "grid bfs"
	},
	"getUnique": {
		"prefix": "unique",
		"body": [
			"#define getunique(v) sort(v.begin(), v.end()); v.erase(unique(v.begin(), v.end()), v.end());"
		],
		"description": "getUnique"
	},
	"N_Size_IntegerInput_0based": {
		"prefix": "ini",
		"body": [
			"int n;",
			"cin >> n;",
			"vector<int> a(n);",
			"for (int i = 0; i < n; i++)",
			"{",
			"    cin >> a[i];",
			"}",
			"$0"
		],
		"description": "N_Size_IntegerInput_0-based_index"
	},
	"N_Size_IntegerInput_1based": {
		"prefix": "inis",
		"body": [
			"int n;",
			"cin >> n;",
			"vector<int> a(n+1);",
			"for (int i = 1; i <= n; i++)",
			"{",
			"    cin >> a[i];",
			"}",
			"$0"
		],
		"description": "N_Size_IntegerInput_1-based_index"
	},
	"N_Size_StringInput_0based": {
		"prefix": "sni",
		"body": [
			"int n;",
			"cin >> n;",
			"vector<string> a(n);",
			"for (int i = 0; i < n; i++)",
			"{",
			"    cin >> a[i];",
			"}",
			"$0"
		],
		"description": "N_Size_StringInput_0-based_index"
	},
	"N_Size_StringInput_1based": {
		"prefix": "snis",
		"body": [
			"int n;",
			"cin >> n;",
			"vector<string> a(n+1);",
			"for (int i = 1; i <= n; i++)",
			"{",
			"    cin >> a[i];",
			"}",
			"$0"
		],
		"description": "N_Size_StringInput_1-based_index"
	},
	"GridInput_0based": {
		"prefix": "grid",
		"body": [
			"vector<vector<int>> g(n, vector<int>(m));",
			"for (int i = 0; i < n; i++)",
			"{",
			"   for (int j = 0; j < m; j++)",
			"   {",
			"       cin >> g[i][j];",
			"   }",
			"}"
		],
		"description": "GridInput_0-based_index"
	},
	"GridInput_1based": {
		"prefix": "grids",
		"body": [
			"vector<vector<int>> g(n+1, vector<int>(m+1));",
			"for (int i = 1; i <= n; i++)",
			"{",
			"   for (int j = 1; j <= m; j++)",
			"   {",
			"       cin >> g[i][j];",
			"   }",
			"}"
		],
		"description": "GridInput_1-based_index"
	},
	"N_SizePairInput_0based": {
		"prefix": "pni",
		"body": [
			"int n;",
			"cin >> n;",
			"vector<pair<int, int>> a(n);",
			"for (int i = 0; i < n; i++)",
			"{",
			"    cin >> a[i].first >> a[i].second;",
			"}",
			"$0"
		],
		"description": "N_SizePairInput_0-based_index"
	},
	"N_SizePairInput_1based": {
		"prefix": "pnis",
		"body": [
			"int n;",
			"cin >> n;",
			"vector<pair<int, int>> a(n+1);",
			"for (int i = 1; i <= n; i++)",
			"{",
			"    cin >> a[i].first >> a[i].second;",
			"}",
			"$0"
		],
		"description": "N_SizePairInput_1-based_index"
	},
	"transpose_matrix":{
		"prefix": "transpose",
		"body": [
			"for(int i=0;i<n;i++){",
			"    for(int j=i+1;j<n;j++){",
			"        swap(${1:a}[i][j],${2:a}[j][i]);",
			"    }",
			"}",
			"$0"
		],
		"description": "transpose_matrix"
	},
	"Graph - adjaceny list representation_0based": {
		"prefix": "graph",
		"body": [
			"int n,m;",
			"cin>>n>>m;",
			"vector<vector<int>> g(n);",
			"int edges=m; ",
			"while(edges--){",
			"\tint u,v;",
			"\tcin>>u>>v;",
			"\tu--,v--;\t\t//check this (already 0based)",
			"\tg[u].push_back(v);",
			"\tg[v].push_back(u);",
			"}",
		],
		"description": "graph input 0-based index"
	},
	"Graph - adjaceny list representation_1based": {
		"prefix": "graphs",
		"body": [
			"int n,m;",
			"cin>>n>>m;",
			"vector<vector<int>> g(n+1);",
			"int edges=m;",
			"while(edges--){",
			"\tint u,v;",
			"\tcin>>u>>v;",
			"\tg[u].push_back(v);",
			"\tg[v].push_back(u);",
			"}",
		],
		"description": "graph input 1-based index"
	},
	"hashingVector":{
		"prefix":"hashit",
		"body":[
			"map<${1:int},int> mp;",
			"for(int i=0;i<n;i++){",
			"    mp[${2:a[i]}]++;",
			"}",
			"$0"
		],
	},
	"Inserting_into_set":{
		"prefix":"setit",
		"body":[
			"set<${1:int}> s;",
			"for(int i=0;i<n;i++){",
			"    s.insert(${2:a[i]});",
			"}",
			"$0",
		],
	},
	"Insert_pair_into_set":{
		"prefix":"setpit",
		"body":[
			"set<pair<${1:int},${2:int}>> s;",
			"for(int i=0;i<n;i++){",
			"    s.insert(${3:a[i]},${4:i});",
			"}",
			"$0",
		],
	},
	"precision": {
		"prefix": "precision",
		"body": [
			"cout << fixed << setprecision(${1:2}) << $0;"
		],
		"description": "precision"
	},
	"fastPrimeCheck": {
		"prefix": "miller_rabin",
		"body": [
			"int exp(int x, int y, int M = 0)",
			"{",
			"    int v = 1;",
			"    if (M > int(0))",
			"    {",
			"        x = x % M;",
			"        while (y > 0)",
			"        {",
			"            if (y & 1)",
			"                v = (v * x) % M;",
			"            y = y >> 1;",
			"            x = (x * x) % M;",
			"        }",
			"        return v;",
			"    }",
			"    else",
			"    {",
			"        while (y > 0)",
			"        {",
			"            if (y & 1)",
			"                v = v * x;",
			"            y = y >> 1;",
			"            x = x * x;",
			"        }",
			"        return v;",
			"    }",
			"}",
			"// check for primes in n^(1/3) complexity",
			"bool miller_rabin(unsigned n)",
			"{",
			"    if (n < 2)",
			"        return false;",
			"",
			"    // Check small primes.",
			"    for (unsigned p : {2, 3, 5, 7, 11, 13, 17, 19, 23, 29})",
			"        if (n % p == 0)",
			"            return n == p;",
			"",
			"    int r = __builtin_ctz(n - 1);",
			"    unsigned d = (n - 1) >> r;",
			"",
			"    // https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Testing_against_small_sets_of_bases",
			"    for (unsigned a : {2, 7, 61})",
			"    {",
			"        unsigned x = exp(a % n, d, n);",
			"",
			"        if (x <= 1 || x == n - 1)",
			"            continue;",
			"",
			"        for (int i = 0; i < r - 1 && x != n - 1; i++)",
			"            x = unsigned(uint64_t(x) * x % n);",
			"",
			"        if (x != n - 1)",
			"            return false;",
			"    }",
			"",
			"    return true;",
			"}"
		],
		"description": "fastPrimeCheck"
	},
	"pi value": {
		"prefix": "pi",
		"body": [
			"const long double PI = acos(-1);"
		],
		"description": "pi value"
	},
	"Calculate time of execution": {
		"prefix": "timee",
		"body": [
			"#define time(d) for (auto blockTime = make_pair(chrono: :high_resolution_clock: :now(), true); blockTime.second; dbg(\"%s: %lld ms\\n\", d, chrono: :duration_cast<chrono: :milliseconds>(chrono: :high_resolution_clock: :now() - blockTime.first).count()),blockTime.second = false)",
		],
		"description": "measures time of a program"
	},
	"Sorting Arrays through vector of pairs": {
		"prefix": "pairsort",
		"body": [
			"void pairsort(vector<int> &a, vector<int> &b, int n)",
			"{",
			"    vector<pair<int, int>> sortit(n);",
			"    for (int i = 0; i < n; i++)",
			"    {",
			"        sortit[i].first = a[i];",
			"        sortit[i].second = b[i];",
			"    }",
			"    sort(all(sortit));",
			"    for (int i = 0; i < n; i++)",
			"    {",
			"        a[i] = sortit[i].first;",
			"        b[i] = sortit[i].second;",
			"    }",
			"}"
		],
		"description": "Sorting Arrays through vector of pairs"
	},
	"Segement finding because it takes time": {
		"prefix": "segmentize",
		"body": [
			" int win = 0;",
			"    int loss = 0;",
			"    vector<int> losses;",
			"    vector<int> wins;",
			"    for (int i = 0; i < n; i++)",
			"    {",
			"        if (s[i] == 'B')",
			"        {",
			"            win++;",
			"            if (loss > 0)",
			"            {",
			"                losses.push_back(loss);",
			"                loss = 0;",
			"            }",
			"        }",
			"        else",
			"        {",
			"            loss++;",
			"            if (win > 0)",
			"            {",
			"                wins.push_back(win);",
			"                win = 0;",
			"            }",
			"        }",
			"    }",
			"    if (win > 0)",
			"    {",
			"        wins.push_back(win);",
			"        win = 0;",
			"    }",
			"    if (loss > 0)",
			"    {",
			"        losses.push_back(loss);",
			"        loss = 0;",
			"    }",
			"    dbg(wins);",
			"    dbg(losses);",
			"    dbg(wins.size(), losses.size());"
		],
		"description": "Segement finding because it takes time"
	},
	"adjacency list dijkstra": {
		"prefix": "dijkstra",
		"body": [
			"int n , m;",
			"cin >> n >> m;",
			"vector<vector<pair<int,int>>>g(n  + 1);",
			"for(int i = 0; i < m; i++)",
			"{",
			"    int u, v;",
			"    cin >> u >> v;",
			"    g[u].push_back({v,0});",
			"    g[v].push_back({u,0});",
			"    ",
			"}",
			"auto dijkstra = [&](int src, int n, vector<int> &p){",
			"    /**",
			"     *  set based implementation",
			"     *  complexity O((n + m)logn)",
			"     */",
			"    vector<int> d(n + 1, inf);",
			"    set<pair<int, int>> q;",
			"    q.insert({0, src});",
			"    d[src] = 0;",
			"    while (!q.empty())",
			"    {",
			"        int v = q.begin()->second;",
			"        // dbg(v);",
			"        q.erase(q.begin());",
			"        for (auto edge : g[v]) {",
			"            int to = edge.first;",
			"            int len = edge.second;",
			"            if (d[v] + len < d[to]) {",
			"                q.erase({d[to], to});",
			"                d[to] = d[v] + len;",
			"                p[to] = v;",
			"                q.insert({d[to], to});",
			"            }",
			"        }",
			"    }",
			"    return d;",
			"    //copy this ! ",
			"};",
			"vector<int> par(n + 1, -1);",
			"vector<int> dd = dijkstra(1, n, par);"
		],
		"description": "adjacency list dijkstra"
	},
		"Modular Artithmetic": {
			"prefix": "modoperations",
			"body": [
				"namespace mod_operations {",
				"    int madd(int a, int b) {",
				"        return (a + b) % mod;",
				"    }",
				"    int msub(int a, int b) {",
				"        return (((a - b) % mod) + mod) % mod;",
				"    }",
				"    int mmul(int a, int b) {",
				"        return ((a % mod) * (b % mod)) % mod;",
				"    }",
				"    int mpow(int base, int exp) {",
				"        int res = 1;",
				"        while (exp) {",
				"            if (exp % 2 == 1){",
				"                res = (res * base) % mod;",
				"            }",
				"            exp >>= 1;",
				"            base = (base * base) % mod;",
				"        }",
				"        return res;",
				"    }",
				"    int minv(int base) {",
				"        return mpow(base, mod - 2);",
				"    }",
				"    int mdiv(int a, int b) {",
				"        return mmul(a, minv(b));",
				"    }",
				"",
				"    const int FACTORIAL_SIZE = 1.1e6;",
				"    int fact[FACTORIAL_SIZE], ifact[FACTORIAL_SIZE];",
				"    bool __factorials_generated__ = 0;",
				"    void gen_factorial(int n) {",
				"        __factorials_generated__ = 1;",
				"        fact[0] = fact[1] = ifact[0] = ifact[1] = 1;",
				"                                                     ",
				"        for (int i = 2; i <= n; i++) {",
				"            fact[i] = (i * fact[i - 1]) % mod;",
				"        }",
				"        ifact[n] = minv(fact[n]);",
				"        for (int i = n - 1; i >= 2; i--) {",
				"            ifact[i] = ((i + 1) * ifact[i + 1]) % mod;",
				"        }",
				"    }",
				"    int ncr(int n, int k) {",
				"        if (!__factorials_generated__) {",
				"            cerr << \"Call gen_factorial you dope\" << endl;",
				"            exit(1);",
				"        }",
				"        if (k < 0 || n < k) return 0;",
				"        int den = (ifact[k] * ifact[n - k]) % mod;",
				"        return (den * fact[n]) % mod;",
				"    }",
				"}",
				"",
				"using namespace mod_operations;"
			],
			"description": "Modular Artithmetic"
		},
		"Sieve using bitset with prime factor and totient fucntion feature": {
			"prefix": ["prime","sieve"],
			"body": [
				"",
				"#define Sieve",
				"int _sieve_size;",
				"bitset<10000010> bs; // 10^7 + small extra bits should be enough for most prime-related problems",
				"vector<int> primes;  // compact list of primes in form of vector<int>",
				"void Eratosthenes(int upperbound)",
				"{                                 // create list of primes in [0 .. upperbound]",
				"    _sieve_size = upperbound + 1; // add 1 to include upperbound",
				"    bs.reset();",
				"    bs.flip(); // set all numbers to 1",
				"    bs.set(0, false);",
				"    bs.set(1, false); // except index 0 and 1",
				"    for (int i = 2; i <= _sieve_size; i++)",
				"        if (bs.test((size_t)i))",
				"        {",
				"            // cross out multiples of i starting from i * i!",
				"            for (int j = i * i; j <= _sieve_size; j += i)",
				"                bs.set((size_t)j, false);",
				"            primes.push_back((size_t)i); // also add this vector containing list of primes",
				"        }",
				"} // call this method in main method",
				"",
				"bool isPrime(int N)",
				"{ // a good enough deterministic prime tester",
				"    if (N < _sieve_size)",
				"        return bs.test(N); // O(1) for small primes",
				"    for (int i = 0; i < primes.size() - 1; i++)",
				"    {",
				"        if (N % primes[i] == 0)",
				"            return false;",
				"    }",
				"    return true; // it takes longer time if N is a large prime!",
				"} // Note: only work for N <= (last prime in vector<int> \"primes\")^2",
				"",
				"vector<int> primeFactors(int N)",
				"{",
				"    vector<int> factors;                 // vector<int> \"primes\" (generated by sieve) is optional",
				"    int PF_idx = 0, PF = primes[PF_idx]; // using PF = 2, 3, 4, ..., is also ok.",
				"    while (N != 1 && (PF * PF <= N))",
				"    { // stop at sqrt(N), but N can get smaller",
				"        while (N % PF == 0)",
				"        {",
				"            N /= PF;",
				"            factors.push_back(PF);",
				"        }                      // remove this PF",
				"        PF = primes[++PF_idx]; // only consider primes!",
				"    }",
				"    if (N != 1)",
				"        factors.push_back(N); // special case if N is actually a prime",
				"    return factors;",
				"}",
				"int EulerPhi(int N)",
				"{",
				"    vector<int> factors = primeFactors(N);",
				"    auto new_end = unique(factors.begin(), factors.end()); // get unique",
				"    int result = N;",
				"    for (auto i = factors.begin(); i != new_end; i++)",
				"        result = result - result / *i;",
				"    return result;",
				"}",
				"/**",
				"define this below in main!",
				"",
				"#ifdef Sieve",
				"    Eratosthenes(N);",
				"#endif",
				"**/",
				""
			],
			"description": "Sieve using bitset with prime factor and totient fucntion feature"
		},
		"optimizer":{
			"prefix": ["optimizer","pragma"],
			"body": [
				"#pragma GCC optimize(\"O3,unroll-loops\")",
				"#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")",
				"//platform with no avx2 support switch with (avx) or (sse,sse2,sse3,ssse3,sse4)"
			],
			"description": "gcc optimizer header",
		},

		"mint" : {
			"prefix": "mint",
			"body":  [
				"template <typename T>",
				"T inverse(T a, T m) {",
				"  T u = 0, v = 1;",
				"  while (a != 0) {",
				"    T t = m / a;",
				"    m -= t * a; swap(a, m);",
				"    u -= t * v; swap(u, v);",
				"  }",
				"  assert(m == 1);",
				"  return u;",
				"}",
				"template <typename T>",
				"class Modular {",
				" public:",
				"  using Type = typename decay<decltype(T::value)>::type;",
				"  constexpr Modular() : value() {}",
				"  template <typename U>",
				"  Modular(const U& x) {",
				"    value = normalize(x);",
				"  }",
				"  template <typename U>",
				"  static Type normalize(const U& x) {",
				"    Type v;",
				"    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);",
				"    else v = static_cast<Type>(x % mod());",
				"    if (v < 0) v += mod();",
				"    return v;",
				"  }",
				"  const Type& operator()() const { return value; }",
				"  template <typename U>",
				"  explicit operator U() const { return static_cast<U>(value); }",
				"  constexpr static Type mod() { return T::value; }",
				"  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }",
				"  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }",
				"  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }",
				"  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }",
				"  Modular& operator++() { return *this += 1; }",
				"  Modular& operator--() { return *this -= 1; }",
				"  Modular operator++(int) { Modular result(*this); *this += 1; return result; }",
				"  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }",
				"  Modular operator-() const { return Modular(-value); }",
				"  template <typename U = T>",
				"  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {",
				"#ifdef _WIN32",
				"    uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);",
				"    uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;",
				"    asm(",
				"      \"divl %4; \\n\\t\"",
				"      : \"=a\" (d), \"=d\" (m)",
				"      : \"d\" (xh), \"a\" (xl), \"r\" (mod())",
				"    );",
				"    value = m;",
				"#else",
				"    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));",
				"#endif",
				"    return *this;",
				"  }",
				"  template <typename U = T>",
				"  typename enable_if<is_same<typename Modular<U>::Type, int64_t>::value, Modular>::type& operator*=(const Modular& rhs) {",
				"    int64_t q = static_cast<int64_t>(static_cast<long double>(value) * rhs.value / mod());",
				"    value = normalize(value * rhs.value - q * mod());",
				"    return *this;",
				"  }",
				"  template <typename U = T>",
				"  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {",
				"    value = normalize(value * rhs.value);",
				"    return *this;",
				"  }",
				"  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }",
				"  template <typename U>",
				"  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);",
				"  template <typename U>",
				"  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);",
				"  template <typename U>",
				"  friend std::istream& operator>>(std::istream& stream, Modular<U>& number);",
				" private:",
				"  Type value;",
				"};",
				"template <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }",
				"template <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }",
				"template <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }",
				"template <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }",
				"template <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }",
				"template <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }",
				"template <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }",
				"template <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }",
				"template <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }",
				"template <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }",
				"template <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }",
				"template <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }",
				"template <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }",
				"template <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }",
				"template <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }",
				"template <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }",
				"template <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }",
				"template <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }",
				"template <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }",
				"template<typename T, typename U>",
				"Modular<T> power(const Modular<T>& a, const U& b) {",
				"  assert(b >= 0);",
				"  Modular<T> x = a, res = 1;",
				"  U p = b;",
				"  while (p > 0) {",
				"    if (p & 1) res *= x;",
				"    x *= x;",
				"    p >>= 1;",
				"  }",
				"  return res;",
				"}",
				"template <typename T>",
				"string to_string(const Modular<T>& number) {",
				"  return to_string(number());",
				"}",
				"template <typename T>",
				"std::ostream& operator<<(std::ostream& stream, const Modular<T>& number) {",
				"  return stream << number();",
				"}",
				"template <typename T>",
				"std::istream& operator>>(std::istream& stream, Modular<T>& number) {",
				"  typename common_type<typename Modular<T>::Type, int64_t>::type x;",
				"  stream >> x;",
				"  number.value = Modular<T>::normalize(x);",
				"  return stream;",
				"}",
				"/*",
				"using ModType = int;",
				"struct VarMod { static ModType value; };",
				"ModType VarMod::value;",
				"ModType& md = VarMod::value;",
				"using Mint = Modular<VarMod>;",
				"*/",
				"constexpr int md = 1e9+7;",
				"using Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;",
				"Mint ncr(int n,int r)",
				   "{",
				   "   if(r==0)return 1;",
				   "   Mint ans=1;",
				   "   for(int i=0;i<r;i++)ans*=(Mint)(n-i);",
				   "",
				   "   for(int i=1;i<=r;i++)ans/=(Mint)i;",
				   "   return ans;",
				   "}"
				 ],
		},

		"Cobinatorics- ncr function": {
			"prefix": "ncr",
			"body": [
				"vector<Mint> fact(1, 1);",
				"vector<Mint> inv_fact(1, 1);",
				"",
				"Mint ncr(int n, int k) {",
				"\tif (k < 0 || k > n) {",
				"\t\treturn 0;",
				"\t}",
				"\twhile ((int) fact.size() < n + 1) {",
				"\t\tfact.push_back(fact.back() * (int) fact.size());",
				"\t\tinv_fact.push_back(1 / fact.back());",
				"\t}",
				"\treturn fact[n] * inv_fact[k] * inv_fact[n - k];",
				"}",
			],
			"description": "ncr function"
		},
}
